#include "tests.hpp"

#ifdef META_RUN_PARSER_TESTS
namespace meta::tests
{
    using namespace ast;

    namespace detail
    {
        template<static_string pattern, typename AST>
        inline constexpr bool expected_ast = std::is_same_v<typename parser<pattern>::ast_type, AST>;
    }

    //static_assert(std::is_same_v<typename parser<static_string(R"(\w*(?:$))")>::ast_type, void>);

    static_assert(detail::expected_ast<R"()", epsilon>);
    static_assert(detail::expected_ast<R"(a))", character<'a'>>);
    static_assert(detail::expected_ast<R"(^ab))",
            sequence
            <
                beginline,
                character<'a'>,
                character<'b'>
            >
    >);
    static_assert(detail::expected_ast<R"(ab$))",
            sequence
            <
                character<'a'>,
                character<'b'>,
                endline
            >
    >);
    static_assert(detail::expected_ast<R"(^ab$))",
            sequence
            <
                beginline,
                character<'a'>,
                character<'b'>,
                endline
            >
    >);
    static_assert(detail::expected_ast<R"(\n))", character<'\n'>>);
    static_assert(detail::expected_ast<R"(\r))", character<'\r'>>);
    static_assert(detail::expected_ast<R"(\t))", character<'\t'>>);
    static_assert(detail::expected_ast<R"(\a))", alpha>);
    static_assert(detail::expected_ast<R"(\D))",
            negated
            <
                digit
            >
    >);
    static_assert(detail::expected_ast<R"(a.?b)",
            sequence
            <
                character<'a'>,
                optional
                <
                    wildcard
                >,
                character<'b'>
            >
    >);
    static_assert(detail::expected_ast<R"((c))",
            capturing
            <
                1,
                character<'c'>
            >
    >);
    static_assert(detail::expected_ast<R"((?:c))", character<'c'>>);
    static_assert(detail::expected_ast<R"(\1)", backref<1>>);
    static_assert(detail::expected_ast<R"(\31)", backref<31>>);
    static_assert(detail::expected_ast<R"(\1+)",
            plus
            <
                backref<1>
            >
    >);
    static_assert(detail::expected_ast<R"(\42?)",
            optional
            <
                backref<42>
            >
    >);
    static_assert(detail::expected_ast<R"((c)\1)",
            sequence
            <
                capturing
                <
                    1,
                    character<'c'>
                >,
                backref<1>
            >
    >);
    static_assert(detail::expected_ast<R"((c)\0)",
            sequence
            <
                capturing
                <
                    1,
                    character<'c'>
                >,
                character<'\0'>
            >
    >);
    static_assert(detail::expected_ast<R"((c)\12)",
            sequence
            <
                capturing
                <
                    1,
                    character<'c'>
                >,
                backref<12>
            >
    >);
    static_assert(detail::expected_ast<R"((c)\01)",
            sequence
            <
                capturing
                <
                    1,
                    character<'c'>
                >,
                character<'\0'>,
                character<'1'>
            >
    >);
    static_assert(detail::expected_ast<R"((c)\12?x)",
            sequence
            <
                capturing
                <
                    1,
                    character<'c'>
                >,
                optional
                <
                    backref<12>
                >,
                character<'x'>
            >
    >);
    static_assert(detail::expected_ast<R"(((c))(e))",
            sequence
            <
                capturing
                <
                    1,
                    capturing
                    <
                        2,
                        character<'c'>
                    >
                >,
                capturing
                <
                    3,
                    character<'e'>
                >
            >
    >);
    static_assert(detail::expected_ast<R"(((?:c))(e))",
            sequence
            <
                capturing
                <
                    1,
                    character<'c'>
                >,
                capturing
                <
                    2,
                    character<'e'>
                >
            >
    >);
    static_assert(detail::expected_ast<R"(c?)",
            optional
            <
                character<'c'>
            >
    >);
    static_assert(detail::expected_ast<R"(c*)",
            star
            <
                character<'c'>
            >
    >);
    static_assert(detail::expected_ast<R"(c+)",
            plus
            <
                character<'c'>
            >
    >);
    static_assert(detail::expected_ast<R"(c{2})",
            repetition
            <
                symbol::quantifier_value<2>,
                symbol::quantifier_value<2>,
                character<'c'>
            >
    >);
    static_assert(detail::expected_ast<R"(c{0})",
            repetition
            <
                symbol::quantifier_value<0>,
                symbol::quantifier_value<0>,
                character<'c'>
            >
    >);
    static_assert(detail::expected_ast<R"(c{)",
            sequence
            <
                character<'c'>,
                character<'{'>
            >
    >);
    static_assert(detail::expected_ast<R"(c{})",
            sequence
            <
                character<'c'>,
                character<'{'>,
                character<'}'>
            >
    >);
    static_assert(detail::expected_ast<R"(c{*})",
            sequence
            <
                character<'c'>,
                star
                <
                    character<'{'>
                >,
                character<'}'>
            >
    >);
    static_assert(detail::expected_ast<R"(c{22})",
            repetition
            <
                symbol::quantifier_value<22>,
                symbol::quantifier_value<22>,
                character<'c'>
            >
    >);
    static_assert(detail::expected_ast<R"(c{22,})",
            repetition
            <
                symbol::quantifier_value<22>,
                symbol::quantifier_inf,
                character<'c'>
            >
    >);
    static_assert(detail::expected_ast<R"(c{22,0})", // parsable syntax but will not compile when trying to match
            repetition
            <
                symbol::quantifier_value<22>,
                symbol::quantifier_value<0>,
                character<'c'>
            >
    >);
    static_assert(detail::expected_ast<R"(c{984,7644})",
            repetition
            <
                symbol::quantifier_value<984>,
                symbol::quantifier_value<7644>,
                character<'c'>
            >
    >);
    static_assert(detail::expected_ast<R"(c{0,22})",
            repetition
            <
                symbol::quantifier_value<0>,
                symbol::quantifier_value<22>,
                character<'c'>
            >
    >);
    static_assert(detail::expected_ast<R"(c{,22})",
            sequence
            <
                character<'c'>,
                character<'{'>,
                character<','>,
                character<'2'>,
                character<'2'>,
                character<'}'>
            >
    >);
    static_assert(detail::expected_ast<R"(c\{22})",
            sequence
            <
                character<'c'>,
                character<'{'>,
                character<'2'>,
                character<'2'>,
                character<'}'>
            >
    >);
    static_assert(detail::expected_ast<R"(c{012})",
            repetition
            <
                symbol::quantifier_value<12>,
                symbol::quantifier_value<12>,
                character<'c'>
            >
    >);
    static_assert(detail::expected_ast<R"(c{x})",
            sequence
            <
                character<'c'>,
                character<'{'>,
                character<'x'>,
                character<'}'>
            >
    >);
    static_assert(detail::expected_ast<R"(c*{012})",
            sequence
            <
                star
                <
                    character<'c'>
                >,
                character<'{'>,
                character<'0'>,
                character<'1'>,
                character<'2'>,
                character<'}'>
            >
    >);
    static_assert(detail::expected_ast<R"((c*{012}){3})",
            repetition
            <
                symbol::quantifier_value<3>,
                symbol::quantifier_value<3>,
                capturing
                <
                    1,
                    sequence
                    <
                        star
                        <
                            character<'c'>
                        >,
                        character<'{'>,
                        character<'0'>,
                        character<'1'>,
                        character<'2'>,
                        character<'}'>
                    >
                >
            >
    >);
    static_assert(detail::expected_ast<R"(a(b(cd)*){15})",
            sequence
            <
                character<'a'>,
                repetition
                <
                    symbol::quantifier_value<15>,
                    symbol::quantifier_value<15>,
                    capturing
                    <
                        1,
                        sequence
                        <
                            character<'b'>,
                            star
                            <
                                capturing
                                <
                                    2,
                                    sequence
                                    <
                                        character<'c'>,
                                        character<'d'>
                                    >
                                >
                            >
                        >
                    >
                >
            >
    >);
    static_assert(detail::expected_ast<R"((\(+)*)",
            star
            <
                capturing
                <
                    1,
                    plus
                    <
                        character<'('>
                    >
                >
            >
    >);
    static_assert(detail::expected_ast<R"((\++)*)",
            star
            <
                capturing
                <
                    1,
                    plus
                    <
                        character<'+'>
                    >
                >
            >
    >);
    static_assert(detail::expected_ast<R"((?:\++)*)",
            star
            <
                plus
                <
                    character<'+'>
                >
            >
    >);
    static_assert(detail::expected_ast<R"(x(?:abc)*x)",
            sequence
            <
                character<'x'>,
                star
                <
                    sequence
                    <
                        character<'a'>,
                        character<'b'>,
                        character<'c'>
                    >
                >,
                character<'x'>
            >
    >);
    static_assert(detail::expected_ast<R"(xyz?(.(?:a(?:b(c(d))?)*)?)*zyx?)",
            sequence
            <
                character<'x'>,
                character<'y'>,
                optional
                <
                    character<'z'>
                >,
                star
                <
                    capturing
                    <
                        1,
                        sequence
                        <
                            wildcard,
                            optional
                            <
                                sequence
                                <
                                    character<'a'>,
                                    star
                                    <
                                        sequence
                                        <
                                            character<'b'>,
                                            optional
                                            <
                                                capturing
                                                <
                                                    2,
                                                    sequence
                                                    <
                                                        character<'c'>,
                                                        capturing
                                                        <
                                                            3,
                                                            character<'d'>
                                                        >
                                                    >
                                                >
                                            >
                                        >
                                    >
                                >
                            >
                        >
                    >
                >,
                character<'z'>,
                character<'y'>,
                optional
                <
                    character<'x'>
                >
            >
    >);
    static_assert(detail::expected_ast<R"(\\)", character<'\\'>>);
    static_assert(detail::expected_ast<R"(\(?x+)",
            sequence
            <
                optional
                <
                    character<'('>
                >,
                character<'x'>,
                star
                <
                    character<'x'>
                >
            >
    >);
    static_assert(detail::expected_ast<R"(abc)",
            sequence
            <
                character<'a'>,
                character<'b'>,
                character<'c'>
            >
    >);
    static_assert(detail::expected_ast<R"(a|b|c)",
            alternation
            <
                character<'a'>,
                character<'b'>,
                character<'c'>
            >
    >);
    static_assert(detail::expected_ast<R"(aa|bb|cc)",
            alternation
            <
                sequence
                <
                    character<'a'>,
                    character<'a'>
                >,
                sequence
                <
                    character<'b'>,
                    character<'b'>
                >,
                sequence
                <
                    character<'c'>,
                    character<'c'>
                >
            >
    >);
    // alternation<optional<a>, b> simplifies to alternation<a, epsilon, b>
    static_assert(detail::expected_ast<R"(a?|b|c)",
            alternation
            <
                character<'a'>,
                epsilon,
                character<'b'>,
                character<'c'>
            >
    >);
    static_assert(detail::expected_ast<R"([a])",
            set
            <
                character<'a'>
            >
    >);
    static_assert(detail::expected_ast<R"([.])",
            set
            <
                character<'.'>
            >
    >);
    static_assert(detail::expected_ast<R"([])", nothing>);
    static_assert(detail::expected_ast<R"([^])", negated<nothing>>);
    static_assert(detail::expected_ast<R"([a][b])",
            sequence
            <
                set
                <
                    character<'a'>
                >,
                set
                <
                    character<'b'>
                >
            >
    >);
    static_assert(detail::expected_ast<R"([][b])",
            sequence
            <
                nothing,
                set
                <
                    character<'b'>
                >
            >
    >);
    static_assert(detail::expected_ast<R"([a]?[b])",
            sequence
            <
                optional
                <
                    set
                    <
                        character<'a'>
                    >
                >,
                set
                <
                    character<'b'>
                >
            >
    >);
    static_assert(detail::expected_ast<R"([a]?[b]?)",
            sequence
            <
                optional
                <
                    set
                    <
                        character<'a'>
                    >
                >,
                optional
                <
                    set
                    <
                        character<'b'>
                    >
                >
            >
    >);
    static_assert(detail::expected_ast<R"([abc])",
            set
            <
                character<'c'>,
                character<'b'>,
                character<'a'>
            >
    >);
    static_assert(detail::expected_ast<R"([a-z])",
            set
            <
                range<'a', 'z'>
            >
    >);
    static_assert(detail::expected_ast<R"([a\-z])",
            set
            <
                character<'z'>,
                character<'-'>,
                character<'a'>
            >
    >);
    static_assert(detail::expected_ast<R"([a-z-])",
            set
            <
                character<'-'>,
                range<'a', 'z'>
            >
    >);
    static_assert(detail::expected_ast<R"([a-z-A])",
            set
            <
                character<'A'>,
                character<'-'>,
                range<'a', 'z'>
            >
    >);
    static_assert(detail::expected_ast<R"([a-z0-9A-Z])",
            set
            <
                range<'A', 'Z'>,
                range<'0', '9'>,
                range<'a', 'z'>
            >
    >);
    static_assert(detail::expected_ast<R"([a-[0-\]])",
            set
            <
                range<'0', ']'>,
                range<'a', '['>
            >
    >);
    static_assert(detail::expected_ast<R"([^a-[0-\]])",
            negated
            <
                set
                <
                    range<'0', ']'>,
                    range<'a', '['>
                >
            >
    >);
    static_assert(detail::expected_ast<R"([a-[0-\]])",
            set
            <
                range<'0', ']'>,
                range<'a', '['>
            >
    >);
    static_assert(detail::expected_ast<R"([-a-[0-\]])",
            set
            <
                range<'0', ']'>,
                range<'a', '['>,
                character<'-'>
            >
    >);
    static_assert(detail::expected_ast<R"([^-aA-Z]))",
            negated
            <
                set
                <
                    range<'A', 'Z'>,
                    character<'a'>,
                    character<'-'>
                >
            >
    >);
    static_assert(detail::expected_ast<R"(a[^-a-z\WA-Z])",
            sequence
            <
                character<'a'>,
                negated
                <
                    set
                    <
                        range<'A', 'Z'>,
                        negated<word>,
                        range<'a', 'z'>,
                        character<'-'>
                    >
                >
            >
    >);
    static_assert(detail::expected_ast<R"(\x\x[^a^[\]b\c]yy)",
            sequence
            <
                character<'x'>,
                character<'x'>,
                negated
                <
                    set
                    <
                        character<'c'>,
                        character<'b'>,
                        character<']'>,
                        character<'['>,
                        character<'^'>,
                        character<'a'>
                    >
                >,
                character<'y'>,
                character<'y'>
            >
    >);
    static_assert(detail::expected_ast<R"(((tuv)?b+)*|xy)",
            alternation
            <
                star
                <
                    capturing
                    <
                        1,
                        sequence
                        <
                            optional
                            <
                                capturing
                                <
                                    2,
                                    sequence
                                    <
                                        character<'t'>,
                                        character<'u'>,
                                        character<'v'>
                                    >
                                >
                            >,
                            character<'b'>,
                            star
                            <
                                character<'b'>
                            >
                        >
                    >
                >,
                sequence
                <
                    character<'x'>,
                    character<'y'>
                >
            >
    >);
}
#endif //META_RUN_PARSER_TESTS