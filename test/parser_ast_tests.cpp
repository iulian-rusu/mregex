#include <mregex.hpp>

namespace meta::tests
{
    using namespace ast;

    namespace
    {
        template<static_string Pattern, typename Expected>
        inline constexpr bool is_ast_of = std::is_same_v<ast_of<Pattern>, Expected>;
    }

    static_assert(is_ast_of<R"()", empty>);
    static_assert(is_ast_of<R"(a)", literal<'a'>>);
    static_assert(is_ast_of<R"((?:))", empty>);
    static_assert(is_ast_of<R"((?:)+)", plus<empty>>);
    static_assert(is_ast_of<R"((?:^)+)", plus<beginning_of_line>>);
    static_assert(is_ast_of<R"((?!))", negative_lookahead<empty>>);
    static_assert(is_ast_of<R"(())", unnamed_capture<1, empty>>);
    static_assert(
        is_ast_of
        <
            R"(a.?b)",
            sequence
            <
                literal<'a'>,
                optional<wildcard>,
                literal<'b'>
            >
        >
    );
    static_assert(
        is_ast_of
        <
            R"(^ab)",
            sequence
            <
                beginning_of_line,
                literal<'a'>,
                literal<'b'>
            >
        >
    );
    static_assert(
        is_ast_of
        <
            R"(ab$)",
            sequence
            <
                literal<'a'>,
                literal<'b'>,
                end_of_line
            >
        >
    );
    static_assert(
        is_ast_of
        <
            R"(^ab$)",
            sequence
            <
                beginning_of_line,
                literal<'a'>,
                literal<'b'>,
                end_of_line
            >
        >
    );
    static_assert(is_ast_of<R"((?>))", atomic<empty>>);
    static_assert(is_ast_of<R"((?>a))", atomic<literal<'a'>>>);
    static_assert(is_ast_of<R"((?>a)+)", plus<atomic<literal<'a'>>>>);
    static_assert(is_ast_of<R"((?>a)++)", possessive_plus<atomic<literal<'a'>>>>);
    static_assert(
        is_ast_of
        <
            R"((?>ab*(\d))+?)",
            lazy_plus
            <
                atomic
                <
                    sequence
                    <
                        literal<'a'>,
                        star<literal<'b'>>,
                        unnamed_capture<1, digit>
                    >
                >
            >
        >
    );
    static_assert(
        is_ast_of
        <
            R"(x(?=ab)x)",
            sequence
            <
                literal<'x'>,
                positive_lookahead
                <
                    sequence
                    <
                        literal<'a'>,
                        literal<'b'>
                    >
                >,
                literal<'x'>
            >
        >
    );
    static_assert(
        is_ast_of
        <
            R"(.+(?<=a+)a)",
            sequence
            <
                plus<wildcard>,
                positive_lookbehind<plus<literal<'a'>>>,
                literal<'a'>
            >
        >
    );
    static_assert(
        is_ast_of
        <
            R"(.*(?<!a|b))",
            sequence
            <
                star<wildcard>,
                negative_lookbehind
                <
                    alternation
                    <
                        literal<'a'>,
                        literal<'b'>
                    >
                >
            >
        >
    );
    static_assert(
        is_ast_of
        <
            R"(x(?!ab){2}x)",
            sequence
            <
                literal<'x'>,
                fixed_repetition
                <
                    2,
                    negative_lookahead
                    <
                        sequence
                        <
                            literal<'a'>,
                            literal<'b'>
                        >
                    >
                >,
                literal<'x'>
            >
        >
    );
    static_assert(
        is_ast_of
        <
            R"(x(?<=a(?<!c*d?)b)x)",
            sequence
            <
                literal<'x'>,
                positive_lookbehind
                <
                    sequence
                    <
                        literal<'a'>,
                        negative_lookbehind
                        <
                            sequence
                            <
                                star<literal<'c'>>,
                                optional<literal<'d'>>
                            >
                        >,
                        literal<'b'>
                    >
                >,
                literal<'x'>
            >
        >
    );
    static_assert(is_ast_of<R"(\R)", linebreak>);
    static_assert(is_ast_of<R"(\N)", negated<linebreak>>);
    static_assert(is_ast_of<R"(\D)", negated<digit>>);
    static_assert(is_ast_of<R"(\b)", word_boundary>);
    static_assert(is_ast_of<R"(\B)", negated<word_boundary>>);
    static_assert(is_ast_of<R"(\A)", beginning_of_input>);
    static_assert(is_ast_of<R"(\Z)", end_of_input>);
    static_assert(is_ast_of<R"(\n)", literal<'\n'>>);
    static_assert(is_ast_of<R"(\r)", literal<'\r'>>);
    static_assert(is_ast_of<R"(\t)", literal<'\t'>>);
    static_assert(is_ast_of<R"(\f)", literal<'\f'>>);
    static_assert(is_ast_of<R"(\v)", literal<'\v'>>);
    static_assert(is_ast_of<R"(\a)", literal<'\a'>>);
    static_assert(is_ast_of<R"(\e)", literal<'\x1b'>>);
    static_assert(is_ast_of<R"(\x1b)", literal<'\x1b'>>);
    static_assert(is_ast_of<R"(\x5F)", literal<'_'>>);
    static_assert(is_ast_of<R"(\x61)", literal<'a'>>);
    static_assert(is_ast_of<R"(\l)", literal<'l'>>);
    static_assert(is_ast_of<R"(\x01?)", optional<literal<'\x01'>>>);
    static_assert(is_ast_of<R"(\x09*)", star<literal<'\x09'>>>);
    static_assert(is_ast_of<R"(\x0a+)", plus<literal<'\x0a'>>>);
    static_assert(is_ast_of<R"(.\xFF.)", sequence<wildcard, literal<'\xFF'>, wildcard>>);
    static_assert(
        is_ast_of
        <
            R"(\xff{3,5}?)",
            lazy_repetition
            <
                symbol::quantifier_value<3>,
                symbol::quantifier_value<5>,
                literal<'\xff'>
            >
        >
    );
    static_assert(
        is_ast_of
        <
            R"(f*\xfff+)",
            sequence
            <
                star<literal<'f'>>,
                literal<'\xff'>,
                plus<literal<'f'>>
            >
        >
    );
    static_assert(is_ast_of<R"((c))", unnamed_capture<1, literal<'c'>>>);
    static_assert(is_ast_of<R"((?:c))", literal<'c'>>);
    static_assert(is_ast_of<R"(\1)", backref<1>>);
    static_assert(is_ast_of<R"(\10)", backref<10>>);
    static_assert(is_ast_of<R"((?:\1)0)", sequence<backref<1>, literal<'0'>>>);
    static_assert(is_ast_of<R"(\1+)", plus<backref<1>>>);
    static_assert(is_ast_of<R"(\42?)", optional<backref<42>>>);
    static_assert(is_ast_of<R"(\1+?)", lazy_plus<backref<1>>>);
    static_assert(is_ast_of<R"(\1++)", possessive_plus<backref<1>>>);
    static_assert(is_ast_of<R"(\42??)", lazy_optional<backref<42>>>);
    static_assert(is_ast_of<R"(\42?+)", possessive_optional<backref<42>>>);
    static_assert(
        is_ast_of
        <
            R"((c)\1)",
            sequence
            <
                unnamed_capture<1, literal<'c'>>,
                backref<1>
            >
        >
    );
    static_assert(
        is_ast_of
        <
            R"((c)\0)",
            sequence
            <
                unnamed_capture<1, literal<'c'>>,
                literal<'\0'>
            >
        >
    );
    static_assert(
        is_ast_of
        <
            R"((c)\12)",
            sequence
            <
                unnamed_capture<1, literal<'c'>>,
                backref<12>
            >
        >
    );
    static_assert(
        is_ast_of
        <
            R"((c)\01)",
            sequence
            <
                unnamed_capture<1, literal<'c'>>,
                literal<'\0'>,
                literal<'1'>
            >
        >
    );
    static_assert(
        is_ast_of
        <
            R"((c)\12?x)",
            sequence
            <
                unnamed_capture<1, literal<'c'>>,
                optional<backref<12>>,
                literal<'x'>
            >
        >
    );
    static_assert(
        is_ast_of
        <
            R"((?>((?>(c)))(e)))",
            atomic
            <
                sequence
                <
                    unnamed_capture
                    <
                        1,
                        atomic<unnamed_capture<2, literal<'c'>>>
                    >,
                    unnamed_capture<3, literal<'e'>>
                >
            >
        >
    );
    static_assert(
        is_ast_of
        <
            R"(((?:c))(e))",
            sequence
            <
                unnamed_capture<1, literal<'c'>>,
                unnamed_capture<2, literal<'e'>>
            >
        >
    );
    static_assert(is_ast_of<R"(c?)", optional<literal<'c'>>>);
    static_assert(is_ast_of<R"(c*)", star<literal<'c'>>>);
    static_assert(is_ast_of<R"(c+)", plus<literal<'c'>>>);
    static_assert(is_ast_of<R"(c??)", lazy_optional<literal<'c'>>>);
    static_assert(is_ast_of<R"(c*?)", lazy_star<literal<'c'>>>);
    static_assert(is_ast_of<R"(c+?)", lazy_plus<literal<'c'>>>);
    static_assert(is_ast_of<R"(c{0})", fixed_repetition<0, literal<'c'>>>);
    static_assert(
        is_ast_of
        <
            R"(c{2,3}?)",
            lazy_repetition
            <
                symbol::quantifier_value<2>,
                symbol::quantifier_value<3>,
                literal<'c'>
            >
        >
    );
    static_assert(
        is_ast_of
        <
            R"(c{2}c{2}?c{2}+)",
            sequence
            <
                fixed_repetition<2, literal<'c'>>,
                lazy_fixed_repetition<2, literal<'c'>>,
                possessive_fixed_repetition<2, literal<'c'>>
            >
        >
    );
    static_assert(
        is_ast_of
        <
            R"(c{)",
            sequence
            <
                literal<'c'>,
                literal<'{'>
            >
        >
    );
    static_assert(
        is_ast_of
        <
            R"(c{})",
            sequence
            <
                literal<'c'>,
                literal<'{'>,
                literal<'}'>
            >
        >
    );
    static_assert(
        is_ast_of
        <
            R"(c{*})",
            sequence
            <
                literal<'c'>,
                star<literal<'{'>>,
                literal<'}'>
            >
        >
    );
    static_assert(is_ast_of<R"(c{22})", fixed_repetition<22, literal<'c'>>>);
    static_assert(is_ast_of<R"(c{022})", fixed_repetition<22, literal<'c'>>>);
    static_assert(
        is_ast_of
        <
            R"(c{22,})",
            repetition
            <
                symbol::quantifier_value<22>,
                symbol::infinity,
                literal<'c'>
            >
        >
    );
    static_assert(
        is_ast_of
        <
            R"(c{22,0}?)", // Parsable syntax, but will not compile if trying to match
            lazy_repetition
            <
                symbol::quantifier_value<22>,
                symbol::quantifier_value<0>,
                literal<'c'>
            >
        >
    );
    static_assert(
        is_ast_of
        <
            R"(c{984,7644}+)",
            possessive_repetition
            <
                symbol::quantifier_value<984>,
                symbol::quantifier_value<7644>,
                literal<'c'>
            >
        >
    );
    static_assert(
        is_ast_of
        <
            R"(c{0,22})",
            repetition
            <
                symbol::quantifier_value<0>,
                symbol::quantifier_value<22>,
                literal<'c'>
            >
        >
    );
    static_assert(
        is_ast_of
        <
            R"(c{,22})",
            sequence
            <
                literal<'c'>,
                literal<'{'>,
                literal<','>,
                literal<'2'>,
                literal<'2'>,
                literal<'}'>
            >
        >
    );
    static_assert(
        is_ast_of
        <
            R"(c\{22})",
            sequence
            <
                literal<'c'>,
                literal<'{'>,
                literal<'2'>,
                literal<'2'>,
                literal<'}'>
            >
        >
    );
    static_assert(
        is_ast_of
        <
            R"(c{x})",
            sequence
            <
                literal<'c'>,
                literal<'{'>,
                literal<'x'>,
                literal<'}'>
            >
        >
    );
    static_assert(
        is_ast_of
        <
            R"(c*\{012})",
            sequence
            <
                star<literal<'c'>>,
                literal<'{'>,
                literal<'0'>,
                literal<'1'>,
                literal<'2'>,
                literal<'}'>
            >
        >
    );
    static_assert(
        is_ast_of
        <
            R"(\b\{)",
            sequence
            <
                word_boundary,
                literal<'{'>
            >
        >
    );
    static_assert(
        is_ast_of
        <
            R"(\b\{012})",
            sequence
            <
                word_boundary,
                literal<'{'>,
                literal<'0'>,
                literal<'1'>,
                literal<'2'>,
                literal<'}'>
            >
        >
    );
    static_assert(
        is_ast_of
        <
            R"(x\A\{+x?)",
            sequence
            <
                literal<'x'>,
                beginning_of_input,
                plus<literal<'{'>>,
                optional<literal<'x'>>
            >
        >
    );
    static_assert(
        is_ast_of
        <
            R"((c*?\{012}){3,})",
            repetition
            <
                symbol::quantifier_value<3>,
                symbol::infinity,
                unnamed_capture
                <
                    1,
                    sequence
                    <
                        lazy_star<literal<'c'>>,
                        literal<'{'>,
                        literal<'0'>,
                        literal<'1'>,
                        literal<'2'>,
                        literal<'}'>
                    >
                >
            >
        >
    );
    static_assert(
        is_ast_of
        <
            R"(a(b(c()d)*){15}?)",
            sequence
            <
                literal<'a'>,
                lazy_fixed_repetition
                <
                    15,
                    unnamed_capture
                    <
                        1,
                        sequence
                        <
                            literal<'b'>,
                            star
                            <
                                unnamed_capture
                                <
                                    2,
                                    sequence
                                    <
                                        literal<'c'>,
                                        unnamed_capture<3, empty>,
                                        literal<'d'>
                                    >
                                >
                            >
                        >
                    >
                >
            >
        >
    );
    static_assert(
        is_ast_of
        <
            R"((\(+)*)",
            star
            <
                unnamed_capture
                <
                    1,
                    plus<literal<'('>>
                >
            >
        >
    );
    static_assert(
        is_ast_of
        <
            R"((\++)*)",
            star
            <
                unnamed_capture
                <
                    1,
                    plus<literal<'+'>>
                >
            >
        >
    );
    static_assert(
        is_ast_of
        <
            R"((?:\++\???)*?)",
            lazy_star
            <
                sequence
                <
                    plus<literal<'+'>>,
                    lazy_optional<literal<'?'>>
                >
            >
        >
    );
    static_assert(
        is_ast_of
        <
            R"(x(?:abc)*x)",
            sequence
            <
                literal<'x'>,
                star
                <
                    sequence
                    <
                        literal<'a'>,
                        literal<'b'>,
                        literal<'c'>
                    >
                >,
                literal<'x'>
            >
        >
    );
    static_assert(
        is_ast_of
        <
            R"(x(?:abc)*+x)",
            sequence
            <
                literal<'x'>,
                possessive_star
                <
                    sequence
                    <
                        literal<'a'>,
                        literal<'b'>,
                        literal<'c'>
                    >
                >,
                literal<'x'>
            >
        >
    );
    static_assert(
        is_ast_of
        <
            R"(()()((()())()))",
            sequence
            <
                unnamed_capture<1, empty>,
                unnamed_capture<2, empty>,
                unnamed_capture
                <
                    3,
                    sequence
                    <
                        unnamed_capture
                        <
                            4,
                            sequence
                            <
                                unnamed_capture<5, empty>,
                                unnamed_capture<6, empty>
                            >
                        >,
                        unnamed_capture<7, empty>
                    >
                >
            >
        >
    );
    static_assert(is_ast_of<R"(\\)", literal<'\\'>>);
    static_assert(
        is_ast_of
        <
            R"(\(??\x8c+)",
            sequence
            <
                lazy_optional<literal<'('>>,
                plus<literal<'\x8c'>>
            >
        >
    );
    static_assert(
        is_ast_of
        <
            R"(abc)",
            sequence
            <
                literal<'a'>,
                literal<'b'>,
                literal<'c'>
            >
        >
    );
    static_assert(
        is_ast_of
        <
            R"(a|b|c)",
            alternation
            <
                literal<'a'>,
                literal<'b'>,
                literal<'c'>
            >
        >
    );
    static_assert(
        is_ast_of
        <
            R"(aa|bb|cc)",
            alternation
            <
                sequence
                <
                    literal<'a'>,
                    literal<'a'>
                >,
                sequence
                <
                    literal<'b'>,
                    literal<'b'>
                >,
                sequence
                <
                    literal<'c'>,
                    literal<'c'>
                >
            >
        >
    );
    static_assert(
        is_ast_of
        <
            R"(a?|b|c)",
            alternation
            <
                optional<literal<'a'>>,
                literal<'b'>,
                literal<'c'>
            >
        >
    );
    static_assert(is_ast_of<R"([a])", set<literal<'a'>>>);
    static_assert(is_ast_of<R"([.])", set<literal<'.'>>>);
    static_assert(is_ast_of<R"([])", nothing>);
    static_assert(is_ast_of<R"([^])", negated<nothing>>);
    static_assert(is_ast_of<R"([-])", set<literal<'-'>>>);
    static_assert(is_ast_of<R"([\0])", set<literal<'\0'>>>);
    static_assert(is_ast_of<R"([\1])", set<literal<'1'>>>);
    static_assert(is_ast_of<R"([\k])", set<literal<'k'>>>);
    static_assert(is_ast_of<R"([(])", set<literal<'('>>>);
    static_assert(is_ast_of<R"([)])", set<literal<')'>>>);
    static_assert(
        is_ast_of
        <
            R"([\k<test>])",
            set
            <
                literal<'>'>,
                literal<'t'>,
                literal<'s'>,
                literal<'e'>,
                literal<'t'>,
                literal<'<'>,
                literal<'k'>
            >
        >
    );
    static_assert(
        is_ast_of
        <
            R"([a-])",
            set
            <
                literal<'-'>,
                literal<'a'>
            >
        >
    );
    static_assert(
        is_ast_of
        <
            R"([\d-a])",
            set
            <
                literal<'a'>,
                literal<'-'>,
                digit
            >
        >
    );
    static_assert(
        is_ast_of
        <
            R"([\d-\xf8])",
            set
            <
                literal<'\xf8'>,
                literal<'-'>,
                digit
            >
        >
    );
    static_assert(
        is_ast_of
        <
            R"([a][b\w])",
            sequence
            <
                set<literal<'a'>>,
                set
                <
                    lower,
                    upper,
                    digit,
                    literal<'_'>,
                    literal<'b'>
                >
            >
        >
    );
    static_assert(
        is_ast_of
        <
            R"([][b])",
            sequence
            <
                nothing,
                set<literal<'b'>>
            >
        >
    );
    static_assert(
        is_ast_of
        <
            R"([a]?[\x10])",
            sequence
            <
                optional<set<literal<'a'>>>,
                set<literal<'\x10'>>
            >
        >
    );
    static_assert(
        is_ast_of
        <
            R"([a]??[b]?)",
            sequence
            <
                lazy_optional<set<literal<'a'>>>,
                optional<set<literal<'b'>>>
            >
        >
    );
    static_assert(
        is_ast_of
        <
            R"([abc])",
            set
            <
                literal<'c'>,
                literal<'b'>,
                literal<'a'>
            >
        >
    );
    static_assert(is_ast_of<R"([a-z])", set<range<'a', 'z'>>>);
    static_assert(is_ast_of<R"([\0-\n])", set<range<'\0', '\n'>>>);
    static_assert(is_ast_of<R"([\X-\Y])", set<range<'X', 'Y'>>>);
    static_assert(
        is_ast_of
        <
            R"([a\-z])",
            set
            <
                literal<'z'>,
                literal<'-'>,
                literal<'a'>
            >
        >
    );
    static_assert(
        is_ast_of
        <
            R"([a-z-])",
            set
            <
                literal<'-'>,
                range<'a', 'z'>
            >
        >
    );
    static_assert(
        is_ast_of
        <
            R"([a-z-A])",
            set
            <
                literal<'A'>,
                literal<'-'>,
                range<'a', 'z'>
            >
        >
    );
    static_assert(
        is_ast_of
        <
            R"([a-z0-9A-Z])",
            set
            <
                range<'A', 'Z'>,
                range<'0', '9'>,
                range<'a', 'z'>
            >
        >
    );
    static_assert(
        is_ast_of
        <
            R"([A-[0-\]])",
            set
            <
                range<'0', ']'>,
                range<'A', '['>
            >
        >
    );
    static_assert(
        is_ast_of
        <
            R"([^A-[0-\]])",
            negated
            <
                set
                <
                    range<'0', ']'>,
                    range<'A', '['>
                >
            >
        >
    );
    static_assert(
        is_ast_of
        <
            R"([-A-[0-\]])",
            set
            <
                range<'0', ']'>,
                range<'A', '['>,
                literal<'-'>
            >
        >
    );
    static_assert(
        is_ast_of
        <
            R"([^-aA-Z])",
            negated
            <
                set
                <
                    range<'A', 'Z'>,
                    literal<'a'>,
                    literal<'-'>
                >
            >
        >
    );
    static_assert(
        is_ast_of
        <
            R"(a[^-a-z\WA-Z])",
            sequence
            <
                literal<'a'>,
                negated
                <
                    set
                    <
                        range<'A', 'Z'>,
                        negated<word>,
                        range<'a', 'z'>,
                        literal<'-'>
                    >
                >
            >
        >
    );
    static_assert(
        is_ast_of
        <
            R"(\h\X[^a^[\]b\c]yy)",
            sequence
            <
                literal<'h'>,
                literal<'X'>,
                negated
                <
                    set
                    <
                        literal<'c'>,
                        literal<'b'>,
                        literal<']'>,
                        literal<'['>,
                        literal<'^'>,
                        literal<'a'>
                    >
                >,
                literal<'y'>,
                literal<'y'>
            >
        >
    );
    static_assert(
        is_ast_of
        <
            R"(((?<_t3st1ng>tuv)?b+?)*|\x0E??y)",
            alternation
            <
                star
                <
                    unnamed_capture
                    <
                        1,
                        sequence
                        <
                            optional
                            <
                                capture
                                <
                                    2,
                                    symbol::name<"_t3st1ng">,
                                    sequence
                                    <
                                        literal<'t'>,
                                        literal<'u'>,
                                        literal<'v'>
                                    >
                                >
                            >,
                            lazy_plus<literal<'b'>>
                        >
                    >
                >,
                sequence
                <
                    lazy_optional<literal<'\x0E'>>,
                    literal<'y'>
                >
            >
        >
    );
    static_assert(
        is_ast_of
        <
            R"((?<group_name>))",
            capture
            <
                1,
                symbol::name<"group_name">,
                empty
            >
        >
    );
    static_assert(
        is_ast_of
        <
            R"((?<test>x+))",
            capture
            <
                1,
                symbol::name<"test">,
                plus<literal<'x'>>
            >
        >
    );
    static_assert(
        is_ast_of
        <
            R"((?<group_name>x+?)\k<group_name>)",
            sequence
            <
                capture
                <
                    1,
                    symbol::name<"group_name">,
                    lazy_plus<literal<'x'>>
                >,
                named_backref<symbol::name<"group_name">>
            >
        >
    );
    static_assert(
        is_ast_of
        <
            R"(x(?<_capture_name>(?>abc?))+)",
            sequence
            <
                literal<'x'>,
                plus
                <
                    capture
                    <
                        1,
                        symbol::name<"_capture_name">,
                        atomic
                        <
                            sequence
                            <
                                literal<'a'>,
                                literal<'b'>,
                                optional<literal<'c'>>
                            >
                        >
                    >
                >
            >
        >
    );
    static_assert(
        is_ast_of
        <
            R"((?<grp_1>abc)?\x09\k<grp_1>\x0A(?<grp_2>xyz){2,})",
            sequence
            <
                optional
                <
                    capture
                    <
                        1,
                        symbol::name<"grp_1">,
                        sequence
                        <
                            literal<'a'>,
                            literal<'b'>,
                            literal<'c'>
                        >
                    >
                >,
                literal<'\t'>, // Same as \x09
                named_backref<symbol::name<"grp_1">>,
                literal<'\n'>, // Same as \x0A
                repetition
                <
                    symbol::quantifier_value<2>,
                    symbol::infinity,
                    capture
                    <
                        2,
                        symbol::name<"grp_2">,
                        sequence
                        <
                            literal<'x'>,
                            literal<'y'>,
                            literal<'z'>
                        >
                    >
                >
            >
        >
    );
}