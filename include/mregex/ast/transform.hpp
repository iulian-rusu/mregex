#ifndef MREGEX_AST_TRANSFORM_HPP
#define MREGEX_AST_TRANSFORM_HPP

#include <mregex/ast/astfwd.hpp>

namespace meta::ast
{
    /**
     * Generic metafunction that implements boilerplate code for transforming the AST.
     * The result is a new AST generated by applying a given metafunction on each node.
     *
     * @tparam Node The AST node type being transformed
     * @tparam Func Metafunction that provides a mapping between AST nodes
     */
    template<typename Node, template<typename> typename Func>
    struct transform
    {
        using type = Node;
    };

    template<template<typename...> typename Wrapper, typename... Inner, template<typename> typename Func>
    struct transform<Wrapper<Inner ...>, Func>
    {
        using type = Wrapper<typename Func<Inner>::type ...>;
    };

    template<match_mode Mode, symbol::finite_quantifier A, symbol::quantifier B, typename Inner, template<typename> typename Func>
    struct transform<basic_repetition<Mode, A, B, Inner>, Func>
    {
        using type = basic_repetition<Mode, A, B, typename Func<Inner>::type>;
    };

    template<assertion_mode Mode, lookaround_direction Direction, typename Inner, template<typename> typename Func>
    struct transform<lookaround<Mode, Direction, Inner>, Func>
    {
        using type = lookaround<Mode, Direction, typename Func<Inner>::type>;
    };

    template<std::size_t ID, typename Name, typename Inner, template<typename> typename Func>
    struct transform<capture<ID, Name, Inner>, Func>
    {
        using type = capture<ID, Name, typename Func<Inner>::type>;
    };
}
#endif //MREGEX_AST_TRANSFORM_HPP